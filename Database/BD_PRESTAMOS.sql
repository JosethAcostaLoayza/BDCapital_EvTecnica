-- 1️ Conectarse como SYS para usar la PDB
-- Esto lo harías si tienes privilegios de administrador
-- sqlplus / as sysdba
SELECT PDB_NAME, STATUS FROM DBA_PDBS;
ALTER SESSION SET CONTAINER = FREEPDB1;

-- 2️ Crear usuario local para el examen
CREATE USER jacosta IDENTIFIED BY jacosta;
GRANT CREATE SESSION, CREATE TABLE, CREATE PROCEDURE, CREATE SEQUENCE TO jacosta;

--Si sale cuota insuficiente en el tablespace USERS
--ALTER USER jacosta QUOTA UNLIMITED ON USERS;

--CONECTARSE CON USUARIO CREADO - JACOSTA
-- ========================================
-- 3️ Crear tablas
-- ========================================
CREATE TABLE Clientes (
    ClienteId NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    NombreCompleto VARCHAR2(100) NOT NULL,
    TipoDocumento VARCHAR2(20) NOT NULL,
    NumeroDocumento VARCHAR2(20) NOT NULL,
    Direccion VARCHAR2(200),
    Telefono VARCHAR2(20),
    Email VARCHAR2(100),
    TipoCliente VARCHAR2(20) DEFAULT 'Natural'
);

CREATE TABLE Prestamos (
    PrestamoId NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    ClienteId NUMBER NOT NULL,
    Monto NUMBER(12,2) NOT NULL,
    FechaDesembolso DATE NOT NULL,
    PlazoMeses NUMBER(3) NOT NULL,
    TasaInteres NUMBER(5,2) NOT NULL,
    Estado VARCHAR2(20) DEFAULT 'Activo',
    CONSTRAINT FK_Prestamos_Clientes FOREIGN KEY (ClienteId)
        REFERENCES Clientes(ClienteId)
        ON DELETE CASCADE
);

CREATE TABLE CronogramaPagos (
    PagoId NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    PrestamoId NUMBER NOT NULL,
    NumeroCuota NUMBER(3) NOT NULL,
    FechaVencimiento DATE NOT NULL,
    MontoCuota NUMBER(12,2) NOT NULL,
    Estado VARCHAR2(20) DEFAULT 'Pendiente',
    FechaPago DATE NULL,
    CONSTRAINT FK_Cronograma_Prestamos FOREIGN KEY (PrestamoId)
        REFERENCES Prestamos(PrestamoId)
        ON DELETE CASCADE
);

GRANT SELECT, INSERT, UPDATE, DELETE ON Clientes TO jacosta;
GRANT SELECT, INSERT, UPDATE, DELETE ON Prestamos TO jacosta;
GRANT SELECT, INSERT, UPDATE, DELETE ON CronogramaPagos TO jacosta;

-- ========================================
-- 4️ Procedimientos almacenados
-- ========================================

-- Registrar Préstamo
CREATE OR REPLACE PROCEDURE sp_RegistrarPrestamo(
    p_NombreCompleto IN VARCHAR2,
    p_TipoDocumento IN VARCHAR2,
    p_NumeroDocumento IN VARCHAR2,
    p_Direccion IN VARCHAR2,
    p_Telefono IN VARCHAR2,
    p_Email IN VARCHAR2,
    p_TipoCliente IN VARCHAR2,
    p_Monto IN NUMBER,
    p_PlazoMeses IN NUMBER,
    p_TasaInteres IN NUMBER
) AS
    v_ClienteId NUMBER;
    v_PrestamoId NUMBER;
    v_Cuota NUMBER;
    v_TasaMensual NUMBER;
BEGIN
    INSERT INTO Clientes(NombreCompleto, TipoDocumento, NumeroDocumento, Direccion, Telefono, Email, TipoCliente)
    VALUES(p_NombreCompleto, p_TipoDocumento, p_NumeroDocumento, p_Direccion, p_Telefono, p_Email, p_TipoCliente)
    RETURNING ClienteId INTO v_ClienteId;

    INSERT INTO Prestamos(ClienteId, Monto, FechaDesembolso, PlazoMeses, TasaInteres, Estado)
    VALUES(v_ClienteId, p_Monto, SYSDATE, p_PlazoMeses, p_TasaInteres, 'Activo')
    RETURNING PrestamoId INTO v_PrestamoId;

    v_TasaMensual := p_TasaInteres/12/100;
    v_Cuota := p_Monto * (v_TasaMensual * POWER(1+v_TasaMensual, p_PlazoMeses)) / (POWER(1+v_TasaMensual, p_PlazoMeses) - 1);

    FOR i IN 1..p_PlazoMeses LOOP
        INSERT INTO CronogramaPagos(PrestamoId, NumeroCuota, FechaVencimiento, MontoCuota, Estado)
        VALUES(v_PrestamoId, i, ADD_MONTHS(SYSDATE, i), ROUND(v_Cuota,2), 'Pendiente');
    END LOOP;

    COMMIT;
END;
/

-- Buscar Cuotas Pendientes/Vencidas
CREATE OR REPLACE PROCEDURE sp_BuscarCuotasVencidasPendientes(
    p_PrestamoId IN NUMBER,
    p_FechaReferencia IN DATE,
    p_Cursor OUT SYS_REFCURSOR
) AS
BEGIN
    OPEN p_Cursor FOR
    SELECT cp.PagoId AS "PagoId",
           c.NombreCompleto AS "NombreCompleto",
           p.PrestamoId AS "PrestamoId",
           cp.NumeroCuota AS "NumeroCuota",
           cp.FechaVencimiento AS "FechaVencimiento",
           cp.MontoCuota AS "MontoCuota",
           cp.Estado AS "Estado"
    FROM CronogramaPagos cp
    JOIN Prestamos p ON cp.PrestamoId = p.PrestamoId
    JOIN Clientes c ON p.ClienteId = c.ClienteId
    WHERE p.PrestamoId = p_PrestamoId
      AND TRIM(UPPER(cp.Estado)) = 'PENDIENTE'
      AND cp.FechaVencimiento <= p_FechaReferencia
    ORDER BY cp.FechaVencimiento;
END;
/

-- Pagar cuota
CREATE OR REPLACE PROCEDURE sp_PagarCuota(
    p_PagoId IN NUMBER,
    p_NumeroCuota IN NUMBER
) AS
BEGIN
    UPDATE CronogramaPagos
    SET Estado = 'Pagado',
        FechaPago = SYSDATE
    WHERE PagoId = p_PagoId AND NumeroCuota = p_NumeroCuota;

    COMMIT;
END;
/

-- Obtener Cronograma por Documento
CREATE OR REPLACE PROCEDURE sp_ObtenerCronogramaPorDocumento(
    p_NumeroDocumento IN VARCHAR2,
    p_Cursor OUT SYS_REFCURSOR
) AS
BEGIN
    OPEN p_Cursor FOR
        SELECT cp.NumeroCuota AS "NumeroCuota",
               cp.FechaVencimiento AS "FechaVencimiento",
               cp.MontoCuota AS "MontoCuota",
               cp.Estado AS "Estado"
        FROM CronogramaPagos cp
        JOIN Prestamos p ON cp.PrestamoId = p.PrestamoId
        JOIN Clientes c ON p.ClienteId = c.ClienteId
        WHERE c.NumeroDocumento = p_NumeroDocumento
        ORDER BY cp.NumeroCuota;
END;
/

-- Listar Prestamos
CREATE OR REPLACE PROCEDURE sp_ListarPrestamos(
    p_Cursor OUT SYS_REFCURSOR
) AS
BEGIN
    OPEN p_Cursor FOR
        SELECT p.PrestamoId AS "PrestamoId",
               c.NombreCompleto AS "Cliente",
               p.Monto AS "Monto",
               p.PlazoMeses AS "PlazoMeses",
               p.TasaInteres AS "TasaInteres",
               p.FechaDesembolso AS "FechaPrestamo"
        FROM Prestamos p
        JOIN Clientes c ON p.ClienteId = c.ClienteId
        ORDER BY p.FechaDesembolso DESC;
END;
/

--INSERT DE PRUEBA
BEGIN
    sp_RegistrarPrestamo(
        p_NombreCompleto => 'Juan Pérez',
        p_TipoDocumento => 'DNI',
        p_NumeroDocumento => '12345678',
        p_Direccion => 'Av. Principal 123',
        p_Telefono => '987654321',
        p_Email => 'juan.perez@correo.com',
        p_TipoCliente => 'Natural',
        p_Monto => 10000,
        p_PlazoMeses => 12,
        p_TasaInteres => 12
    );
END;
/